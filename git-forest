#!/usr/bin/perl
#
#  git-森林
#  text-based tree visualisation
#  Copyright © Jan Engelhardt <jengelh [at] medozas de>, 2008
#
#  Modified by Takaaki Kasai (@takaakikasai), 2017
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
use Getopt::Long;
use Git;
use strict;
use utf8;
use Encode qw(encode decode);
use POSIX qw(strftime);
my $Repo          = Git->repository($ENV{"GIT_DIR"} || ".");
my $Pretty_fmt    = "format:%h\t%at\t%an\t%C(reset)%C(auto)%d%C(reset)\t%s";
my $Reverse_order = 0;
my $Show_all      = 0;
my $Show_rebase   = 1;
my $Show_status   = 1;
my $Style         = 1;
my $Subvine_depth = 2;
my %Color         = (
  "default"      => "\e[0m",
  "tree"         => "\e[0;36m",
  "hash"         => "\e[0;35m",
  "date"         => "\e[0;34m",
  "author"       => "\e[0;33m",
  "tag"          => "\e[1;35m",

  "black"        => "\e[0;30m",
  "red"          => "\e[0;31m",
  "green"        => "\e[0;32m",
  "yellow"       => "\e[0;33m",
  "blue"         => "\e[0;34m",
  "magenta"      => "\e[0;35m",
  "cyan"         => "\e[0;36m",
  "white"        => "\e[0;37m",

  "black_bold"   => "\e[1;30m",
  "red_bold"     => "\e[1;31m",
  "green_bold"   => "\e[1;32m",
  "yellow_bold"  => "\e[1;33m",
  "blue_bold"    => "\e[1;34m",
  "magenta_bold" => "\e[1;35m",
  "cyan_bold"    => "\e[1;36m",
  "white_bold"   => "\e[1;37m",
);
my @Branch_colors_ref     = ('blue_bold', 'yellow_bold', 'magenta_bold', 'green_bold', 'cyan_bold');
my @Branch_colors_now     = ();
my $Hash_width            = 8;
my $Date_format           = "%Y-%m-%d %H:%M";
my $Date_width            = 16;
my $Graph_margin_left     = 2;
my $Graph_margin_right    = 1;
my $Graph_symbol_commit   = '●';
my $Graph_symbol_merge    = '◎';
my $Graph_symbol_overpass = '═';
my $Graph_symbol_root     = '■';
my $Graph_symbol_tip      = '○';

&main();

sub main
{
  &Getopt::Long::Configure(qw(bundling pass_through));
  &GetOptions(
    "all"                     => \$Show_all,
    "no-color"                => sub { %Color = (); },
    "no-status"               => sub { $Show_status = 0; },
    "pretty=s"                => sub {}, # ignore
    "format=s"                => sub {}, # ignore
    "reverse"                 => \$Reverse_order,
    "svdepth=i"               => \$Subvine_depth,
    "style=i"                 => \$Style,
    "graph-margin-left=i"     => \$Graph_margin_left,
    "graph-margin-right=i"    => \$Graph_margin_right,
    "graph-symbol-commit=s"   => sub { $Graph_symbol_commit   = decode('UTF-8', $_[1]) },
    "graph-symbol-merge=s"    => sub { $Graph_symbol_merge    = decode('UTF-8', $_[1]) },
    "graph-symbol-overpass=s" => sub { $Graph_symbol_overpass = decode('UTF-8', $_[1]) },
    "graph-symbol-root=s"     => sub { $Graph_symbol_root     = decode('UTF-8', $_[1]) },
    "graph-symbol-tip=s"      => sub { $Graph_symbol_tip      = decode('UTF-8', $_[1]) },
    "help"                    => sub {
      my $help;
      my $script_name = $0;
      $script_name =~ s/^.*\/([^\/]+)$/$1/;
      $help = "Usage: $script_name [options]\n";
      $help = $help . "      --help                              Show this help and exit.\n";
      $help = $help . "      --svdepth=<Subvine depth>           Maximum length of merge subvines (default: 2).\n";
      $help = $help . "      --no-status                         Do not show the working tree status near HEAD.\n";
      $help = $help . "      --style=<Style>                     Select <Style> from following.\n";
      $help = $help . "                                            1   Use single-line visuals (default).\n";
      $help = $help . "                                            2   Use double-line visuals.\n";
      $help = $help . "                                            10  Use specific rounded Unicode visuals for edges.\n";
      $help = $help . "                                            15  Use single bold-line visuals.\n";
      $help = $help . "      --graph-margin-left=<Margin>        Left margin of the commit graph (default: 2).\n";
      $help = $help . "      --graph-margin-right=<Margin>       Right margin of the commit graph (default: 1).\n";
      $help = $help . "      --graph-symbol-commit=<Symbol>      Graph symbol of commit (default: ● ).\n";
      $help = $help . "      --graph-symbol-merge=<Symbol>       Graph symbol of merge (default: ◎ ).\n";
      $help = $help . "      --graph-symbol-overpass=<Symbol>    Graph symbol of overpass (default: ═ ).\n";
      $help = $help . "      --graph-symbol-root=<Symbol>        Graph symbol of root (default: ■ ).\n";
      $help = $help . "      --graph-symbol-tip=<Symbol>         Graph symbol of tip (default: ○ ).\n";
      $help = $help . "  All other options and arguments (except --pretty or --format) are passed down to git-log. (e.g. --all)\n";
      print encode('UTF-8', $help);
      exit;
    },
  );
  ++$Subvine_depth;
  if (substr($Pretty_fmt, 0, 7) ne "format:") {
    die "If you use --pretty, it must be in the form of --pretty=format:";
  }
  $Pretty_fmt = substr($Pretty_fmt, 7);
  while ($Pretty_fmt =~ /\%./g) {
    if ($& eq "\%b" || $& eq "\%n" || ($&.$') =~ /^\%x0a/i) {
      die "Cannot use \%b, \%n or \%x0a in --pretty=format:";
    }
  }
  if ($Show_all) {
    #
    # Give --all back. And add HEAD to include commits
    # in the rev list that belong to a detached HEAD.
    #
    unshift(@ARGV, "--all", "HEAD");
  }
  if (keys %Color > 0) {
    unshift(@ARGV, '--color');
  } else {
    unshift(@ARGV, '--no-color');
  }
  if ($Reverse_order) {
    tie(*STDOUT, "ReverseOutput");
  }
  &process();
  if ($Reverse_order) {
    untie *STDOUT;
  }
}

sub get_status
{
  my $dirty = '';
  my $mid_flow = '';
  my $repo_path = $Repo->repo_path();

  my $has_change_unstaged = length($Repo->command('diff', '--shortstat'));
  my $has_change_staged = length($Repo->command('diff', '--shortstat', '--cached'));
  my $has_stash = length($Repo->command('stash', 'list'));
  my $has_untracked = length($Repo->command('ls-files', '--others', '--exclude-standard'));

  $dirty = $dirty . '*' if $has_change_unstaged;
  $dirty = $dirty . '+' if $has_change_staged;
  $dirty = $dirty . '$' if $has_stash;
  $dirty = $dirty . '%' if $has_untracked;
  $dirty = ' ' . $dirty if length($dirty);

  if (-d "$repo_path/rebase-merge") {
    if (-f "$repo_path/rebase-merge/interactive") {
      $mid_flow = "|REBASE-i";
    } else {
      $mid_flow = "|REBASE-m";
    }
  } elsif (-d "$repo_path/rebase-apply") {
    if (-f "$repo_path/rebase-apply/rebasing") {
      $mid_flow = "|REBASE";
    } elsif (-f "$repo_path/rebase-apply/applying") {
      $mid_flow = "|AM";
    } else {
      $mid_flow = "|AM/REBASE";
    }
  } elsif (-f "$repo_path/MERGE_HEAD") {
    $mid_flow = "|MERGING";
  } elsif (-f "$repo_path/CHERRY_PICK_HEAD") {
    $mid_flow = "|CHERRY-PICKING";
  } elsif (-f "$repo_path/REVERT_HEAD") {
    $mid_flow = "|REVERTING";
  } elsif (-f "$repo_path/BISECT_LOG") {
    $mid_flow = "|BISECTING";
  }

  return $dirty . $mid_flow;
}

sub get_line_block
{
  my($fh, $max) = @_;

  while (scalar(@h::ist) < $max) {
    my $x;

    $x = <$fh>;
    if (!defined($x)) {
      last;
    }
    push(@h::ist, $x);
  }

  my @ret = (shift @h::ist);
  foreach (2..$max) {
    push(@ret, $h::ist[$_-2]);
  }
  return @ret;
}

sub process
{
  my(@vine);
  my $refs = &get_refs();
  my $status = &get_status() if $Show_status;
  my($fh, $fhc) = $Repo->command_output_pipe("log", "--date-order",
                  "--pretty=format:<%H><%h><%P>$Pretty_fmt", @ARGV);

  while (my($line, @next_sha) = get_line_block($fh, $Subvine_depth)) {
    if (!defined($line)) {
      last;
    }
    chomp $line;
    my($sha, $mini_sha, $parents, $msg) =
      ($line =~ /^<(.*?)><(.*?)><(.*?)>(.*)/s);
    my @next_sha = map { ($_) = m{^<(.*?)>} } @next_sha;
    my @parents = split(" ", $parents);
    my ($hash, $time, $author, $auto_refs, $msg) = split("\t", $msg, 5);
    my $date = strftime $Date_format, localtime($time);

    &vine_branch(\@vine, $sha);

    print sprintf("$Color{hash}%-${Hash_width}s $Color{date}%-${Date_width}s%${Graph_margin_left}s$Color{default}", $hash, $date, '');

    my $ra = &vine_commit(\@vine, $sha, \@parents);
    print &vis_post(&vis_commit($ra));

    for (my $i = 0; $i < $Graph_margin_right; $i++) {
      print ' ';
    }

    print $Color{author}, $author, $Color{default};

    if (exists($refs->{$sha})) {
      $auto_refs =~ s/[^\/]HEAD/$&$status/ if $Show_status && (grep { $_ eq 'HEAD' } @{$refs->{$sha}});
      $auto_refs =~ s/\x1b\[\d;\d\dm(?=tag: )/$Color{tag}/g if (grep { m{^refs/tags/}s } @{$refs->{$sha}});
    }

    print $auto_refs, ' ', $msg, "\n";

    &vine_merge(\@vine, $sha, \@next_sha, \@parents);
  }
  $Repo->command_close_pipe($fh, $fhc);
}

sub get_next_pick
{
  my $fh = shift @_;
  while (defined(my $line = <$fh>)) {
    if ($line =~ /^\s*#/) {
      next;
    }
    if ($line =~ /^\S+\s+(\S+)/) {
      return $2;
    }
  }
  return undef;
}

sub get_refs
{
  my($fh, $c) = $Repo->command_output_pipe("show-ref");
  my $ret = {};

  while (defined(my $ln = <$fh>)) {
    chomp $ln;
    if (length($ln) == 0) {
      next;
    }

    my($sha, $name) = ($ln =~ /^(\S+)\s+(.*)/s);
    if (!exists($ret->{$sha})) {
      $ret->{$sha} = [];
    }
    push(@{$ret->{$sha}}, $name);
    if ($name =~ m{^refs/tags/}) {
      my $sub_sha = $Repo->command("log", "-1",
                    "--pretty=format:%H", $name);
      chomp $sub_sha;
      if ($sha ne $sub_sha) {
        push(@{$ret->{$sub_sha}}, $name);
      }
    }
  }

  $Repo->command_close_pipe($fh, $c);

  my $rebase = -e $Repo->repo_path()."/rebase-merge/git-rebase-todo" &&
               $Show_rebase;
  if ($rebase) {
    if (open(my $act_fh, $Repo->repo_path().
        "/rebase-merge/git-rebase-todo")) {
      my($curr) = (<$act_fh> =~ /^\S+\s+(\S+)/);
      $curr = &get_next_pick($act_fh);
      if (defined($curr)) {
        $curr = $Repo->command("rev-parse", $curr);
        chomp $curr;
        unshift(@{$ret->{$curr}}, "rebase/next");
      }
      close $act_fh;
    }

    chomp(my $onto = $Repo->command("rev-parse", "rebase-merge/onto"));
    unshift(@{$ret->{$onto}}, "rebase/onto");
  }

  my $head = $Repo->command("rev-parse", "HEAD");
  chomp $head;
  if ($rebase) {
    unshift(@{$ret->{$head}}, "rebase/new");
  }
  unshift(@{$ret->{$head}}, "HEAD");

  return $ret;
}

#
# vine_branch -
# @vine:  column array containing the expected parent IDs
# @rev:    commit ID
#
# Draws the branching vine matrix between a commit K and K^ (@rev).
#
sub vine_branch
{
  my($vine, $rev) = @_;
  my $idx;

  my($matched, $master) = (0, 0);
  my $ret;

  # Transform array into string
  for ($idx = 0; $idx <= $#$vine; ++$idx) {
    if (!defined($vine->[$idx])) {
      $ret .= " ";
      next;
    } elsif ($vine->[$idx] ne $rev) {
      $ret .= "I";
      next;
    }
    if (!$master && $idx % 2 == 0) {
      $ret .= "S";
      $master = 1;
    } else {
      $ret .= "s";
      $vine->[$idx] = undef;
    }
    ++$matched;
  }

  if ($matched < 2) {
    return;
  }

  &remove_trailing_blanks($vine);
  print sprintf("%-${Hash_width}s %-${Date_width}s%${Graph_margin_left}s", '', '', '');
  print &vis_post(&vis_fan($ret, "branch")), "\n";
}

#
# vine_commit -
# @vine:  column array containing the expected IDs
# @rev:    commit ID
# @parents:  array of parent IDs
#
sub vine_commit
{
  my($vine, $rev, $parents) = @_;
  my $ret;

  for (my $i = 0; $i <= $#$vine; ++$i) {
    if (!defined($vine->[$i])) {
      $ret .= " ";
    } elsif ($vine->[$i] eq $rev) {
      $ret .= "C";
    } else {
      $ret .= "I";
    }
  }

  if ($ret !~ /C/) {
    # Not having produced a C before means this is a tip
    my $i;
    for ($i = &round_down2($#$vine); $i >= 0; $i -= 2) {
      if (substr($ret, $i, 1) eq " ") {
        substr($ret, $i, 1) = "t";
        $vine->[$i] = $rev;
        last;
      }
    }
    if ($i < 0) {
      if (scalar(@$vine) % 2 != 0) {
        push(@$vine, undef);
        $ret .= " ";
      }
      $ret .= "t";
      push(@$vine, $rev);
    }
  }

  &remove_trailing_blanks($vine);

  if (scalar(@$parents) == 0) {
    # tree root
    $ret =~ tr/C/r/;
  } elsif (scalar(@$parents) > 1) {
    # merge commit
    $ret =~ tr/C/M/;
  }

  return $ret;
}

#
# vine_merge -
# @vine:  column array containing the expected parent IDs
# @rev:    commit ID
# @next_rev:  next commit ID in the revision list
# @parents:  parent IDs of @rev
#
# Draws the merging vine matrix between a commit K (@rev) and K^ (@parents).
#
sub vine_merge
{
  my($vine, $rev, $next_rev, $parents) = @_;
  my $orig_vine = -1;
  my @slot;
  my($ret, $max);

  for (my $i = 0; $i <= $#$vine; ++$i) {
    if ($vine->[$i] eq $rev) {
      $orig_vine = $i;
      last;
    }
  }

  if ($orig_vine == -1) {
    die "vine_commit() did not add this vine.";
  }

  if (scalar(@$parents) <= 1) {
    #
    # A single parent does not need a visual. Update and return.
    #
    $vine->[$orig_vine] = $parents->[0];
    &remove_trailing_blanks($vine);
    return;
  }

  #
  # Put previously seen branches in the vine subcolumns
  # Need to keep at least one parent for the slot algorithm below.
  #
  for (my $j = 0; $j <= $#$parents && $#$parents > 0; ++$j) {
    for (my $idx = 0; $idx <= $#$vine; ++$idx) {
      if ($vine->[$idx] ne $parents->[$j] ||
          !grep { my $z = $vine->[$idx]; /^\Q$z\E$/ }
          @$next_rev) {
        next;
      }
      if ($idx == $orig_vine) {
        die "Should not really happen";
      }
      if ($idx < $orig_vine) {
        my $p = $idx + 1;
        if (defined($vine->[$p])) {
          $p = $idx - 1;
        }
        if (defined($vine->[$p])) {
          last;
        }
        $vine->[$p] = $parents->[$j];
        str_expand(\$ret, $p + 1);
        substr($ret, $p, 1) = "s";
      } else {
        my $p = $idx - 1;
        if (defined($vine->[$p]) || $p < 0) {
          $p = $idx + 1;
        }
        if (defined($vine->[$p])) {
          last;
        }
        $vine->[$p] = $parents->[$j];
        str_expand(\$ret, $p + 1);
        substr($ret, $p, 1) = "s";
      }
      splice(@$parents, $j, 1);
      --$j; # outer loop
      last; # inner loop
    }
  }

  #
  # Find some good spots to split out into and record columns
  # that will be used soon in the @slot list.
  #
  push(@slot, $orig_vine);
  my $parent = 0;

  for (my $seeker = 2; $parent < $#$parents &&
      $seeker < 2 + $#$vine; ++$seeker)
  {
    my $idx = ($seeker % 2 == 0) ? -1 : 1;
    $idx   *= int($seeker / 2);
    $idx   *= 2;
    $idx   += $orig_vine;

    if ($idx >= 0 && $idx <= $#$vine && !defined($vine->[$idx])) {
      push(@slot, $idx);
      $vine->[$idx] = "0" x 40;
      ++$parent;
    }
  }
  for (my $idx = $orig_vine + 2; $parent < $#$parents; $idx += 2) {
    if (!defined($vine->[$idx])) {
      push(@slot, $idx);
      ++$parent;
    }
  }

  if (scalar(@slot) != scalar(@$parents)) {
    die "Serious internal problem";
  }

  @slot = sort { $a <=> $b } @slot;
  $max  = scalar(@$vine) + 2 * scalar(@slot);

  for (my $i = 0; $i < $max; ++$i) {
    str_expand(\$ret, $i + 1);
    if ($#slot >= 0 && $i == $slot[0]) {
      shift @slot;
      $vine->[$i] = shift @$parents;
      substr($ret, $i, 1) = ($i == $orig_vine) ? "S" : "s";
    } elsif (substr($ret, $i, 1) eq "s") {
      ; # keep existing fanouts
    } elsif (defined($vine->[$i])) {
      substr($ret, $i, 1) = "I";
    } else {
      substr($ret, $i, 1) = " ";
    }
  }

  print sprintf("%-${Hash_width}s %-${Date_width}s%${Graph_margin_left}s", '', '', '');
  print &vis_post(&vis_fan($ret, "merge")), "\n";
}

#
# vis_* - transform control string into usable graphic
#
# To cut down on code, the three vine_* functions produce only a dumb,
# but already unambiguous, control string which needs some processing
# before it is ready for public display.
#

sub vis_commit
{
  my $s = shift @_;
  my $f = shift @_;
  $s =~ s/ +$//gs;
  if (defined $f) {
    $s .= $f;
  }
  return $s;
}

sub vis_fan
{
  my $s = shift @_;
  my $b = shift(@_) eq "branch";

  $s =~ s{s.*s}{
    $_ = $&;
    $_ =~ tr/ I/DO/;
    $_;
  }ei;

  # Transform an ODODO.. sequence into a contiguous overpass.
  $s =~ s{O[DO]+O}{"O" x length($&)}eg;

  # Do left/right edge transformation
  $s =~ s{(s.*)S(.*s)}{&vis_fan3($1, $2)}es ||
  $s =~ s{(s.*)S}{&vis_fan2L($1)."B"}es ||
  $s =~ s{S(.*s)}{"A".&vis_fan2R($1)}es ||
  die "Should not come here";

  if ($b) {
    $s =~ tr/efg/xyz/;
  }

  return $s;
}

sub vis_fan2L
{
  my $l = shift @_;
  $l =~ s/^s/e/;
  $l =~ s/s/f/g;
  return $l;
}

sub vis_fan2R
{
  my $r = shift @_;
  $r =~ s/s$/g/;
  $r =~ s/s/f/g;
  return $r;
}

sub vis_fan3
{
  my($l, $r) = @_;
  $l =~ s/^s/e/;
  $l =~ s/s/f/g;
  $r =~ s/s$/g/;
  $r =~ s/s/f/g;
  return "${l}K$r";
}

sub vis_xfrm
{
  # A: branch to right
  # B: branch to right
  # C: commit
  # M: merge commit
  # D:
  # e: merge visual left (╔)
  # f: merge visual center (╦)
  # g: merge visual right (╗)
  # I: straight line (║)
  # K: branch visual split (╬)
  # m: single line (─)
  # O: overpass (≡)
  # r: root (╙)
  # t: tip (╓)
  # x: branch visual left (╚)
  # y: branch visual center (╩)
  # z: branch visual right (╝)
  # *: filler

  my $s = shift @_;
  my $spc = shift @_;
  if ($spc) {
    $s =~ s{[Ctr].*}{
      $_ = $&;
      $_ =~ s{ }{\*}g;
      $_;
    }esg;
  }

  # Change Branch colors
  my @s_arr_orig = split //, $s;
  my @s_arr_odd;
  foreach my $i(0 .. $#s_arr_orig) {
    if ($i % 2 == 0) {
      push @s_arr_odd, $s_arr_orig[$i];
    }
  }
  foreach my $i(0 .. $#s_arr_odd) {
    if ($s_arr_odd[$i] =~ /^[efgt]$/) {
      my $j = -1;
      while ($j <= $#Branch_colors_ref) {
        $j++;
        next if ($i > 0 && $Branch_colors_now[$i - 1] eq $Branch_colors_ref[$j]);
        next if ($Branch_colors_now[$i] eq $Branch_colors_ref[$j]);
        next if ($i < $#s_arr_odd && $Branch_colors_now[$i + 1] eq $Branch_colors_ref[$j]);
        last;
      }
      $Branch_colors_now[$i] = $Branch_colors_ref[$j];
    }
  }

  if ($Reverse_order) {
    $s =~ tr/efg.rt.xyz/xyz.tr.efg/;
  }

  if ($Style == 1) {
    $s =~ tr/ABD.efg.IKm.xyz/├┤─.┌┬┐.│┼─.└┴┘/;
  } elsif ($Style == 2) {
    $s =~ tr/ABD.efg.IKm.xyz/╠╣═.╔╦╗.║╬─.╚╩╝/;
  } elsif ($Style == 10) {
    $s =~ tr/ABD.efg.IKm.xyz/├┤─.╭┬╮.│┼─.╰┴╯/;
  } elsif ($Style == 15) {
    $s =~ tr/ABD.efg.IKm.xyz/┣┫━.┏┳┓.┃╋━.┗┻┛/;
  }

  eval "\$s =~ tr/CMOrt/$Graph_symbol_commit$Graph_symbol_merge$Graph_symbol_overpass$Graph_symbol_root$Graph_symbol_tip/";

  return $s;
}

#
# vis_post - post-process/transform vine graphic
# Apply user-specific style transformation.
#
sub vis_post
{
  my $s = shift @_;
  my $f = shift @_;

  $s = vis_xfrm($s, defined $f);
  $f =~ s/^([^\x1b]+)/vis_xfrm($1)/e;
  $f =~ s/(\x1b.*?m)([^\x1b]+)/$1.vis_xfrm($2)/eg;
  if (defined $f) {
    $s =~ s/\*/$f/g;
    $s =~ s{\Q$Color{default}\E}{$&.$Color{tree}}egs;
    $s .= $f;
  }

  if ($s =~ /^(.*)([$Graph_symbol_commit$Graph_symbol_merge$Graph_symbol_root$Graph_symbol_tip])/) {
    my $branch_color = $Color{$Branch_colors_now[length($1) / 2]};
    $s =~ s/([$Graph_symbol_commit$Graph_symbol_merge$Graph_symbol_root$Graph_symbol_tip])/$branch_color$1$Color{tree}/;
  }
  return $Color{tree}, encode('UTF-8', $s), $Color{default};
}

sub remove_trailing_blanks
{
  my $a = shift @_;

  while (scalar(@$a) > 0 && !defined($a->[$#$a])) {
    pop(@$a);
  }
}

sub round_down2
{
  my $i = shift @_;
  if ($i < 0) {
    return $i;
  }
  return $i & ~1;
}

sub str_expand
{
  my $r = shift @_;
  my $l = shift @_;

  if (length($$r) < $l) {
    $$r .= " " x ($l - length($$r));
  }
}

package ReverseOutput;
require Tie::Handle;
@ReverseOutput::ISA = qw(Tie::Handle);

sub TIEHANDLE
{
  my $class = shift @_;
  my $self  = {};

  open($self->{fh}, ">&STDOUT");

  return bless $self, $class;
}

sub PRINT
{
  my $self = shift @_;
  my $fh   = $self->{fh};

  $self->{saved} .= join($\, @_);
}

sub UNTIE
{
  my $self = shift @_;
  my $fh   = $self->{fh};

  print $fh join($/, reverse split(/\n/s, $self->{saved})), "\n";
  undef $self->{saved};
}
